{"version":3,"sources":["assets/images/background.png","utils/TestConnector.js","pages/App.js","serviceWorker.js","index.js"],"names":["module","exports","callTestApi","randomNumber","a","fetch","then","response","json","catch","error","console","id","number","App","useState","loadedTodo","setLoadedTodo","useEffect","Math","floor","random","result","style","backgroundImage","BackgroundImage","title","href","target","getResultText","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,wC,kNCA9BC,EAAW,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sEACZC,MAAM,8CAAD,OAC8BF,IAE7CG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAKL,OAJAC,QAAQD,MACN,qDACAA,GAEK,CAAEE,IAAK,EAAGC,OAAQV,MAVJ,mFAAH,sDCkDTW,EA7CH,WAAO,IAAD,EACoBC,qBADpB,mBACTC,EADS,KACGC,EADH,KAGhBC,qBAAU,WACR,IAAIf,EAAegB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EACpDnB,EAAYC,GAAcG,MAAK,SAAAgB,GAAM,OAAIL,EAAcK,QACtD,IA4BH,OACE,yBACEV,GAAG,cACHW,MAAO,CAAEC,gBAAgB,OAAD,OAASC,IAAT,OAExB,mEA/BkB,WACpB,GAAIT,EACF,OAAQA,EAAWJ,IACjB,KAAM,EACJ,OACE,uEAC4CI,EAAWH,OADvD,8BAKJ,QACE,OACE,mCACQG,EAAWJ,GADnB,mBACsC,2BAAII,EAAWU,OADrD,wBAEmB,IACjB,uBAAGC,KAAK,wCAAwCC,OAAO,UAAvD,OAHF,KAWR,OAAO,yCASJC,KCjCDC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAoCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT/B,MAAK,SAAAoC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BrC,QAAQsC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlB/B,QAAQsC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BjC,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCxFjE0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,qBAAwBzB,OAAOC,SAASN,MACpD+B,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,qBAAN,UAEP3B,IA8DV,SAAiCO,EAAOC,GAEtCjC,MAAMgC,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5BtD,MAAK,SAAAC,GAEJ,IAAMsD,EAActD,EAASqD,QAAQE,IAAI,gBAEnB,MAApBvD,EAASwD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAM3D,MAAK,SAAAoC,GACjCA,EAAawB,aAAa5D,MAAK,WAC7B0B,OAAOC,SAASkC,eAKpB/B,EAAgBC,EAAOC,MAG1B7B,OAAM,WACLE,QAAQsC,IACN,oEArFAmB,CAAwB/B,EAAOC,GAI/B3B,QAAQsC,IACN,8GAKFb,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.7806670c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.66441eee.png\";","export const callTestApi = async randomNumber => {\n  return await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${randomNumber}`\n  )\n    .then(response => response.json())\n    .catch(error => {\n      console.error(\n        \"Error while retrieving the todo from the test API!\",\n        error\n      );\n      return { id: -1, number: randomNumber };\n    });\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"../styles/App.css\";\nimport BackgroundImage from \"../assets/images/background.png\";\nimport { callTestApi } from \"../utils/TestConnector\";\n\nconst App = () => {\n  const [loadedTodo, setLoadedTodo] = useState();\n\n  useEffect(() => {\n    let randomNumber = Math.floor(Math.random() * 10) + 1;\n    callTestApi(randomNumber).then(result => setLoadedTodo(result));\n  }, []);\n\n  const getResultText = () => {\n    if (loadedTodo) {\n      switch (loadedTodo.id) {\n        case -1:\n          return (\n            <p>\n              You're offline and tried to fetch the id {loadedTodo.number} which\n              was not prechached!\n            </p>\n          );\n        default:\n          return (\n            <p>\n              Todo {loadedTodo.id} with the title <i>{loadedTodo.title}</i> was\n              fetched from the{\" \"}\n              <a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\">\n                API\n              </a>\n              !\n            </p>\n          );\n      }\n    }\n    return <p>Loading...</p>;\n  };\n\n  return (\n    <div\n      id=\"app-wrapper\"\n      style={{ backgroundImage: `url(${BackgroundImage})` }}\n    >\n      <h2>Welcome to the minimal PWA example!</h2>\n      {getResultText()}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}